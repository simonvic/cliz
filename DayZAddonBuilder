#!/bin/bash

source DayZLauncherUtil

useExperimental=false
args=()
srcDir=""
destDir=""
dryRun=false

##
# 0 = no output
# 1 = mod list | windows output
# 2 = mod list | windows output | arguments
# 3 = mod list | windows output | arguments | executables
# 4 = mod list | windows output | arguments | executables | final command 
verbosity=0

##
#	Print information on parameters used when executing the command
function printLaunchParameters() {
	printf "%s\n" "> LAUNCHING ADDON BUILDER"
	[[ $verbosity -ge 4 ]] && printf "%s\n" "> EXE: $addonBuilderExe"
	if [[ $verbosity -ge 1 ]]; then
		printf "\t%s\n" "- SOURCE:      ${srcDir}"
		printf "\t%s\n" "- DESTINATION: ${destDir}"
	fi

	if [[ $verbosity -ge 4 ]]; then
		# Print launch arguments vertically
		printf "\t%s\n" "- ARGUMENTS:"
		for arg in "${args[@]}"; do
			printf "\t\t%s\n" "$arg"
		done
	fi
}

function startAddonBuilderGUI() {
	if [[ $verbosity -ge 4 ]]; then
		printf "\t%s" "> COMMAND: "
		echo cmd.exe "/c" "cd" "/D" "${addonBuilderExe%\\*}" "&&" ".\\${addonBuilderExe##*\\}"
	fi
	[[ "$dryRun" == false ]] && cmd.exe "/c" "cd" "/D" "${addonBuilderExe%\\*}" "&&" ".\\${addonBuilderExe##*\\}"
}

function startAddonBuild() {
	if [[ $verbosity -ge 4 ]]; then
		printf "\t%s" "> COMMAND: "
		echo cmd.exe "/c" "cd" "/D" "${addonBuilderExe%\\*}" "&&" ".\\${addonBuilderExe##*\\}" "$srcDir" "$destDir\Addons" "${args[@]}"
	fi
	[[ "$dryRun" == false ]] && cmd.exe "/c" "cd" "/D" "${addonBuilderExe%\\*}" "&&" ".\\${addonBuilderExe##*\\}" "$srcDir" "$destDir\Addons" "${args[@]}"
}

function copyKey() {
	wMkdir "$destDir\Keys"
	local publicKey="${privateKey%.*}.bikey"
	if [[ $verbosity -ge 1 ]]; then
		printf "\t%s\n" "> COPYING PUBLIC KEY"
		if [[ $verbosity -ge 2 ]]; then
			printf "\t\t%s\n" "- SOURCE:      $publicKey"
			printf "\t\t%s\n" "- DESTINATION: $destDir\Keys\\${publicKey##*\\}"
		fi
		if [[ $verbosity -ge 4 ]]; then
			printf "\t\t%s" "> COMMAND: "
			echo cmd.exe "/c" "copy" "$publicKey" "$destDir\Keys"
		fi
	fi
	[[ "$dryRun" == true ]] && return
	if [[ $verbosity -ge 2 ]]; then
		cmd.exe "/c" "copy" "$publicKey" "$destDir\Keys"
	else
		cmd.exe "/c" "copy" "$publicKey" "$destDir\Keys" >/dev/null
	fi
}

function copyModDescriptor() {
	local modDescriptor="$srcDir\mod.ini"
	if [[ $verbosity -ge 1 ]]; then
		printf "\t%s\n" "> COPYING MOD DESCRIPTOR"
		if [[ $verbosity -ge 2 ]]; then
			printf "\t\t%s\n" "- SOURCE:      $modDescriptor"
			printf "\t\t%s\n" "- DESTINATION: $destDir\mod.cpp"
		fi
		if [[ $verbosity -ge 4 ]]; then
			printf "\t\t%s" "> COMMAND: "
			echo cmd.exe "/c" "copy" "$modDescriptor" "$destDir\mod.cpp"
		fi
	fi
	[[ "$dryRun" == true ]] && return
	if [[ $verbosity -ge 2 ]]; then
		cmd.exe "/c" "copy" "$modDescriptor" "$destDir\mod.cpp"
	else
		cmd.exe "/c" "copy" "$modDescriptor" "$destDir\mod.cpp" >/dev/null
	fi
}

options=(
	"h,help                    ?Print this page and exit"
	"v,verbose                 ?Be verbose. Can be repeated for more verbosity"
	"s,source:dir              ?Source directory to build"
	"d,destination:dir         ?Destination directory of the built mod"
	"o,only-pack               ?Only stores the folder to a PBO. Does NOT binarize files. (Binarization is default behaviour.)"
	"c,clear-temp              ?Before binarizing, the content of subfolder for the current project is deleted."
	"b,binarize-all-textures   ?Binarize all .TGA, .PNG textures even if they are not referenced by any model or included in any textures.lst file."
	"l,extended-logs           ?Enable extended logging"
	"t,temp-folder:dir         ?Path for the directory which stores binarized files, default destination is temp in Windows.
	                               If no value is present then the last folder is used
	                               If you use the same folder, the next time you binarize the same addon it will take less time."
	"p,prefix:prefix           ?Relative path to files used in addon, if not present then this value is calculated automatically."
	"P,project-path:path       ?Path to folder where project starts from, if you are packing only the path of a project.
	                               It is recommended to use the same as the source path or to define it accordingly to the need. 
	                               In case it is defined to P:, Binarize will process the entire P: drive which takes time."
	"k,sign-with:key           ?Private BI key (*.BIPRIVATEKEY) file that will be used to sign the addon.
	                               Addons created with a signature can be added to secure servers."
	"K,sign-with-copy:key      ?Private BI key (*.BIPRIVATEKEY) file that will be used to sign the addon.
	                               Addons created with a signature can be added to secure servers.
	                               The key will also be copied in the destination directory"
	"i,include:files           ?Directly copy matched files to PBO.
	                               Absolute path to file with wildcard patterns.
	                               Separator is ';' and ','."
	"e,exclude:files           ?Absolute or relative file path.
	                               Contains patterns of files which are excluded from final pbo.
	                               Look for 'exclude.lst' file in DayZTools install dir for an example of exclude file content."
	"V,pbo-version:version     ?PBO version for FileBank (-property version=<version>)"
	"B,binarize-exe:exe        ?Path to Binarize tool. Default Binarize tool is used if not specified."
	"C,cfgConvert-exe:exe      ?Path to cfg convert tool. Default is used if not specified."
	"F,filebank-exe:exe        ?Path to cfg filebank tool. Default is used if not specified."
	"D,dssignfile-exe:exe      ?Path to cfg DssignFile  tool. Default is used if not specified."
	"T,dayz-tools:folder       ?Specifies the path to DayZ Tools directory with other tools (Binarize, CfgConvert, Filebank, ...).
	                               By default is the directory retrieved from Steam client."
	"dry-run                   ?Simulate the buildign without actually doing anything"
	"experimental              ?Use experimental version of DayZAddonBuilder"
)
_options=$(declare -p options)

function printUsage() {
	mangen \
		--name "${0##*/}" \
		--options "$_options" \
		--command-width 40 \
		--description-width 80 \
		--new-line-indent 4
}

function parseArgs() {
	local parsedArgs
	parsedArgs=$(getopt -n "${0##*/}" -o "$(mangen -so "$_options")" --long "$(mangen -lo "$_options")" -- "$@")
	[[ "$?" != "0" ]] && exit 1
	eval set -- "$parsedArgs"

	while true; do
		case $1 in
		-h | --help)                  printUsage; exit 1 ;;
		-v | --verbose)               ((verbosity++))                            ;;
		-o | --only-pack)             args+=("-packonly")                        ;;
		-c | --clear-temp)            args+=("-clear")                           ;;
		-b | --binarize-all-textures) args+=("-binarizeAllTextures")             ;;
		-l | --extended-logs)         args+=("-binarizeFullLogs")                ;;
		-s | --source)                srcDir="$2"                        ; shift ;;
		-d | --destination)           destDir="$2"                       ; shift ;;
		-t | --temp-folder)           args+=("-temp=$2")                 ; shift ;;
		-p | --prefix)                args+=("-prefix=$2")               ; shift ;;
		-P | --project-path)          args+=("-project=$2")              ; shift ;;
		-k | --sign-with)             privateKey="$2"                    ; shift ;;
		-K | --sign-with-copy)        privateKey="$2"; willCopyKey=true  ; shift ;;
		-i | --include)               args+=("-include=$2")              ; shift ;;
		-V | --pbo-version)           args+=("-pboversion=$2")           ; shift ;;
		-B | --binarize-exe)          args+=("-binarize=$2")             ; shift ;;
		-C | --cfgConvert-exe)        args+=("-cfgconvert=$2")           ; shift ;;
		-F | --filebank-exe)          args+=("-filebank=$2")             ; shift ;;
		-D | --dssignfile-exe)        args+=("-dssignfile=$2")           ; shift ;;
		-T | --dayz-tools)            args+=("-toolsDirectory=$2")       ; shift ;;
		-e | --exclude)
			echo "WARNING: Exclude command is broken. Ignoring it. Edit the default exclude.lst file to exclude files"
			# args+=("-exclude=$2"); shift
			shift
			;;
		--dry-run) dryRun=true ;;
		--experimental) useExperimental=true ;;
		--)
			shift
			break
			;;
		*)
			echo "Invalid option: $1"
			printUsage
			exit 1
			;;
		esac
		shift #go to next arg
	done

	[[ -n "$privateKey" ]] && args+=("-sign=$privateKey")
}


###############################################################################
parseArgs "$@"
[[ "$dryRun" == true ]] && printf "%s\n" "> DRY RUN..."

[[ "$useExperimental" == true ]] \
	&& addonBuilderExe=$(queryCfg '/config/tools/experimental/addonbuilder/text()') \
	|| addonBuilderExe=$(queryCfg '/config/tools/stable/addonbuilder/text()') \

# Launch GUI
if [ -z "$srcDir" ] && [ -z "$destDir" ] && [ "${#args[@]}" -eq 0 ]; then
	[[ $verbosity -ge 1 ]] && echo "No parameters specified, launching AddonBuilder GUI"
	case $verbosity in
		0 | 1) startAddonBuilderGUI >/dev/null 2>/dev/null ;;
		2) startAddonBuilderGUI 2>/dev/null ;;
		*) startAddonBuilderGUI ;;
	esac
	
	exit 1
fi

: "${srcDir:?"A mod source directory MUST be defined!"}"
: "${destDir:?"A mod destination directory MUST be defined!"}"

[[ $verbosity -ge 1 ]] && printLaunchParameters

case $verbosity in
	0 | 1) startAddonBuild >/dev/null 2>/dev/null ;;
	2) startAddonBuild 2>/dev/null ;;
	*) startAddonBuild ;;
esac


[[ $willCopyKey == true ]] && copyKey
copyModDescriptor
