#!/bin/bash

##
# @param xpath
# @param xml data default: cliz cfg
# @return xpath result
function queryCfg() {
	xmllint --xpath "$1" - <<< "${2:-$clizCfg}" 2> /dev/null
}

##
# @param xpath
# @param xml data default: cliz cfg
# @return xpath result
function queryCfgAttr() {
	queryCfg "$1" "$2" | cut -d '=' -f 2 | tr -d '"'
}

##
# @param mod id
# @return mod xml node
function resolveMod() {
	queryCfg "//*[@id='$1']"
}

##
# @param mod id
# @return mod directory
function resolveModDir() {
	local mod
	mod=$(resolveMod "$1")
	case "$(queryCfg "name(/*)" "$mod")" in
		mod) queryCfgAttr "string(//@dir)" "$mod" ;;
		workshop) queryCfgAttr "concat('$workshopDir\\', string(//@dir))" "$mod" ;;
		*) : ;;
	esac
}

##
# Windows, make directory
# @param directory
function wMkdir(){
	cmd.exe /c "if" "not" "exist" "${1}" mkdir "${1}"
}

##
# Find Windows process
# @param Get-WmiObject filter
# @return pid
function wFindPid() {
	powershell.exe "Get-WmiObject win32_process -Filter \"$1\" | Select-Object -First 1 -ExpandProperty processid" | tr -d -c 0-9
}

##
# Kill windows process
# @param pid
function wTaskKill() {
	taskkill.exe /F /PID "$1" /T
}

##
# @param process name query
# @param verbosity default: 0
function killProcess() {
	local pid verbosity
	pid=$(wFindPid "$1")
	verbosity=${2:-0}
	if [[ -n "$pid" ]]; then
		[[ $verbosity -ge 2 ]] && printf "\t%s\n" "> Killing $1 $pid ..."
		wTaskKill "$pid"
	else
		[[ $verbosity -ge 2 ]] && printf "\t%s\n" "> Process not found: $1"
	fi
}

##
# Kill DayZ client process
# @verbosity default: 0
function killClient() {
	killProcess "commandline LIKE '${clientExe:?Must provide a valid exe}%'" "$1"
}


##
# Kill DayZ server process
# @verbosity default: 0
function killServer() {
	killProcess "commandline LIKE '${serverExe:?Must provide a valid exe}%'" "$1"
}

##
# Kill DayZ client diag process
# @verbosity default: 0
function killClientDiag() {
	killProcess "commandline LIKE '${clientExeDiag:?Must provide a valid exe}%' AND NOT commandline LIKE '%-server%'" "$1"
}

##
# Kill DayZ server diag process
# @verbosity default: 0
function killServerDiag() {
	killProcess "commandline LIKE '${clientExeDiag:?Must provide a valid exe}%-server%'" "$1"
}

###############################################################################

clizCfgPath=${XDG_CONFIG_HOME:-$HOME/.config}/cliz/config.xml
if [[ ! -e "$clizCfgPath"  ]]; then
	printf "%s\n" "Can't load config file: $clizCfgPath"
	exit 1
fi
clizCfg=$(xmllint "$clizCfgPath")
if [[ $? -eq 1 ]]; then
	printf "%s\n" "Invalid config!"
	exit 1
fi
duplicate=$(queryCfg '//@id' | sort | uniq -d)
if [[ -n "$duplicate" ]]; then
	printf "%s\n" "Found duplicate ids in default-config.xml:"
	printf "%s\n" "$duplicate" | cut -d '"' -f2
	printf "%s\n" "Fix your config before proceeding."
	exit 1
else
	unset -v duplicate
fi

clientDir=$(queryCfg "/config/client/dir/text()")
clientDirExp=$(queryCfg "/config/client/dir-exp/text()")
clientExe=$(queryCfg "/config/client/exe/text()")
clientExeDiag=$(queryCfg "/config/client/exe-diag/text()")
serverDir=$(queryCfg "/config/server/dir/text()")
serverDirExp=$(queryCfg "/config/server/dir-exp/text()")
serverExe=$(queryCfg "/config/server/exe/text()")
workshopDir=$(queryCfg '/config/workshop/dir/text()')
