#!/bin/bash

source DayZLauncherUtil

profileName=$(queryCfg '/config/client/defaults/profile-name/text()')
serverAddress=$(queryCfg '/config/client/defaults/connect/text()')
serverMission=$(queryCfg '/config/server/defaults/mission/text()')
serverConfig=$(queryCfg '/config/server/defaults/config/text()')
serverProfileFolder=$(queryCfg '/config/server/defaults/profile/text()')
privateKey=$(queryCfg '/config/private-key/text()')

verbosity=0
verbosityArgs=()
modsToBuild=()              # array of mods id to build
modsToLaunch=()             # array of mods id to launch
modsToLaunchServerSide=()   # array of mods id to be loaded server side
args=()
serverArgs=()
clientArgs=()
declare -A modsToBuildResolved     # source=destination
modsToLaunchResolved=()            # array of paths
modsToLaunchServerSideResolved=()  # array of paths

##
# @param mod id
function addModToBuild() {
	local mod modType deps
	mod=$(queryCfg "//*[@id='$1']")
	modType=$(queryCfg "name(/*)" "$mod")
	case "$modType" in
		workshop) : ;;
		group)
			deps=$(queryCfgAttr "//deps/dep/@ref" "$mod")
			if [[ -n "$deps" ]]; then
				while read -r dep; do
					addModToBuild "$dep"
				done <<< "$deps"
			fi
			;;
		mod) modsToBuild+=("$1") ;;
	esac
}

##
# @param mod id
function addModToLaunch() {
	local mod modType deps
	mod=$(queryCfg "//*[@id='$1']")
	modType=$(queryCfg "name(/*)" "$mod")
	case "$modType" in
		group) : ;;
		workshop | mod) modsToLaunch+=("$1") ;;
	esac
	deps=$(queryCfgAttr "//deps/dep/@ref" "$mod")
	if [[ -n "$deps" ]]; then
		while read -r dep; do
			addModToLaunch "$dep"
		done <<< "$deps"
	fi
}

##
# @param mod id
function addModToLaunchServerSide() {
	local mod modType deps
	mod=$(queryCfg "//*[@id='$1']")
	modType=$(queryCfg "name(/*)" "$mod")
	case "$modType" in
		group) : ;;
		workshop | mod) modsToLaunchServerSide+=("$1") ;;
	esac
	deps=$(queryCfgAttr "//deps/dep/@ref" "$mod")
	if [[ -n "$deps" ]]; then
		while read -r dep; do
			addModToLaunchServerSide "$dep"
		done <<< "$deps"
	fi
}

##
# @return formatted mod arg (i.e. --mods=A;B;C;D)
function getFormattedModsArgs() {
	local modsArg=""
	for mod in "${modsToLaunchResolved[@]}"; do
		[[ -z "$modsArg" ]] && modsArg="--mods=$mod" || modsArg="$modsArg;$mod"
	done
	printf "%s" "$modsArg"
}

##
# @return formatted mod arg (i.e. --server-mods=A;B;C;D)
function getFormattedServerModsArgs() {
	local modsArg=""
	for mod in "${modsToLaunchServerSideResolved[@]}"; do
		[[ -z "$modsArg" ]] && modsArg="--server-mods=$mod" || modsArg="$modsArg;$mod"
	done
	printf "%s" "$modsArg"
}

function debugConfigMod() {
	local mod deps
	mod=$(queryCfg "//*[@id='$1']")
	deps=$(queryCfgAttr "//*[@id='$1']/deps/dep/@ref")
	local depsDepth=${2:-0}
	for i in $(seq "$depsDepth"); do
		printf "\t"
	done
	printf "%s%s\n" "|_ " "$1"
	if [[ -n "$deps" ]]; then
		while read -r dep; do
			debugConfigMod "$dep" "$((depsDepth + 1))"
		done <<< "$deps"
	fi
}

function debugConfig() {
	printf "%s\n" "Client"
	printf "%20s=%s\n" \
		"dir" "$(queryCfg '/config/client/dir/text()')" \
		"dir-exp" "$(queryCfg '/config/client/dir-exp/text()')" \
		"profile-name" "$profileName"
	printf "%s\n" "Server"
	printf "%20s=%s\n" \
		"dir" "$(queryCfg '/config/server/dir/text()')" \
		"dir-exp" "$(queryCfg '/config/server/dir-exp/text()')"
	printf "%20s=%s\n" "private-key" "$privateKey" 
	printf "%s\n" "Mods"
	while read -r i; do
		debugConfigMod "$i"
	done <<< "$(queryCfgAttr '//@id')"
}

function debugArgs() {
	if [[ ${#args[*]} -gt 0 ]]; then
		printf "%s\n" "- ARGS"
		printf "\t%s\n" "${args[@]}"
	fi
	if [[ ${#clientArgs[*]} -gt 0 ]]; then
		printf "%s\n" "- CLIENT ARGS"
		printf "\t%s\n" "${clientArgs[@]}"
	fi
	if [[ ${#serverArgs[*]} -gt 0 ]]; then
		printf "%s\n" "- SERVER ARGS"
		printf "\t%s\n" "${serverArgs[@]}"
	fi
	if [[ ${#modsToBuild[*]} -gt 0 ]]; then
		printf "%s\n" "- MODS TO BUILD"
		printf "\t- %s\n" "${modsToBuild[@]}"
	fi
	if [[ ${#modsToLaunch[*]} -gt 0 ]]; then
		printf "%s\n" "- MODS TO LAUNCH"
		printf "\t- %s\n" "${modsToLaunch[@]}"
	fi
	if [[ ${#modsToLaunchServerSide[*]} -gt 0 ]]; then
		printf "%s\n" "- MODS TO LAUNCH SERVER SIDE"
		printf "\t- %s\n" "${modsToLaunchServerSide[@]}"
	fi
}

function debugResolvedMods() {
	if [[ ${#modsToBuildResolved[@]} -gt 0 ]]; then
		printf "%s\n" "- MODS TO BUILD"
		for src in "${!modsToBuildResolved[@]}"; do
			printf "\t%s -> %s\n" "$src" "${modsToBuildResolved["$src"]}"
		done
	fi
	if [[ ${#modsToLaunchResolved[*]} -gt 0 ]]; then
		printf "%s\n" "- MODS TO LAUNCH"
		printf "\t- %s\n" "${modsToLaunchResolved[@]}"
	fi
	if [[ ${#modsToLaunchServerSideResolved[*]} -gt 0 ]]; then
		printf "%s\n" "- MODS TO LAUNCH SERVER SIDE"
		printf "\t- %s\n" "${modsToLaunchServerSideResolved[@]}"
	fi
}

##
# Resolve IDs of mods to build and launch
function resolveMods() {
	for id in "${modsToBuild[@]}"; do
		local mod src dst
		mod=$(resolveMod "$id")
		case "$(queryCfg "name(/*)" "$mod")" in
			mod)
				src=$(queryCfgAttr "string(//@source)" "$mod")
				dst=$(queryCfgAttr "string(//@dir)" "$mod")
				;;
			*) : ;;
		esac
		if [[ -z "$src" ]]; then
			printf "%s\n" "Trying to build mod $id, but it is missing the source directory!"
			exit 1
		fi
		if [[ -z "$dst" ]]; then
			printf "%s\n" "Trying to build mod $id, but it is missing the destination directory!"
			exit 1
		fi
		modsToBuildResolved["$src"]="$dst"
	done
	if [[ ${#modsToLaunch[@]} -gt 0 ]]; then
		while read -r id; do
			modsToLaunchResolved+=("$(resolveModDir "$id")")
		done < <(printf "%s\n" "${modsToLaunch[@]}" | awk '!x[$0]++')
	fi
	if [[ ${#modsToLaunchServerSide[@]} -gt 0 ]]; then
		while read -r id; do
			modsToLaunchServerSideResolved+=("$(resolveModDir "$id")")
		done < <(printf "%s\n" "${modsToLaunchServerSide[@]}" | awk '!x[$0]++')
	fi
}

##
# Kill all clients and servers (diag included)
function killAllProcesses() {
	printf "%s\n" "> KILLING PROCESSES"
	killClient "$verbosity"
	killClientDiag "$verbosity"
	killServer "$verbosity"
	killServerDiag "$verbosity"
}

##
# Launch the server
function launchServer() {
	DayZServerLauncher \
		"${verbosityArgs[@]}" \
		--do-logs \
		--admin-log \
		--net-log \
		--freeze-check \
		"${args[@]}" \
		"${serverArgs[@]}" \
		"$(getFormattedModsArgs)" \
		"$(getFormattedServerModsArgs)" \
		${serverMission:+--mission "$serverMission"} \
		${serverConfig:+--config "$serverConfig"} \
		${serverProfileFolder:+--profile-folder "$serverProfileFolder"}

		if [[ ! "$serverMission" =~ "dayzOffline.chernarusplus" ]]; then
			printf "%s\n" "Using custom mission. Remember to edit your server config ( $serverConfig )!"
		fi
}

##
# Launch the client
function launchClient() {
	DayZClientLauncher \
		"${verbosityArgs[@]}" \
		--do-logs \
		--script-debug \
		--no-pause \
		"${args[@]}" \
		"${clientArgs[@]}" \
		"$(getFormattedModsArgs)" \
		${serverAddress:+--server-address "$serverAddress"} \
		${profileName:+--name "$profileName"}
}

##
# Build specified mods
function buildMods() {
	for source in "${!modsToBuildResolved[@]}"; do
		DayZAddonBuilder \
			--verbose \
			"${verbosityArgs[@]}" \
			--binarize-all-textures \
			--extended-logs \
			--clear-temp \
			--source "$source" \
			--destination "${modsToBuildResolved[$source]}" \
			--prefix "${source/P:\\/}" \
			--project-path "$source" \
			${privateKey:+--sign-with-copy "$privateKey"} \
			--include "P:\ADDON_BUILDER_DATA\toInclude.txt" \
			--temp-folder "%TEMP%\dayzaddonbuilder"
	done
}

options=(
	"h,help                       --Print this page and exit"
	"v,verbose                    --Be verbose. Can be repeated for more verbosity"
	"s,launch-server              --Launch the server"
	"c,launch-client              --Launch the client"
	"k,kill                       --Kill all game instances"
	"b,build:mod                  --Specify mod to build. Can be repeated to build multiple mods"
	"l,launch-mod:mod             --Specify mod to be loaded when launching game client/server"
	"L,launch-mod-server:mod      --Specify mod to be loaded server side when launching game server"
	"B,build-and-launch:mod       --Specify mod to build and to be loaded when launching game client/server"
	"d,diagnostic                 --Use diagnostic executable"
	"f,file-patching              --Enable file patching. Diagnostic exe will be used."
	"e,experimental               --Use experimental version of the game client/server"
	"script-define:define         --Pass a script define. Can be repeated for more"
	"ignore-new-errors            --New errors are treated as warnings."
)
_options=$(declare -p options)

function printUsage() {
	mangen \
		--name "${0##*/}" \
		--options "$_options" \
		--command-width 35 \
		--description-width 80 \
		--new-line-indent 4
}

function parseArgs() {
	local parsedArgs
	parsedArgs=$(getopt -n "${0##*/}" -o "$(mangen -so "$_options")" --long "$(mangen -lo "$_options")" -- "$@")
	[[ "$?" != "0" ]] && exit 1
	eval set -- "$parsedArgs"

	while true; do
		case $1 in
			-h | --help)              printUsage; exit 1 ;;
			-v | --verbose)           ((verbosity++)); verbosityArgs+=("--verbose") ;;
			-s | --launch-server)     willLaunchServer=true ;;
			-c | --launch-client)     willLaunchClient=true ;;
			-k | --kill-game)         willKillGame=true ;;
			-b | --build)             addModToBuild "$2"; shift ;;
			-l | --launch-mod)        addModToLaunch "$2"; shift ;;
			-L | --launch-mod-server) addModToLaunchServerSide "$2"; shift ;;
			-B | --build-and-launch)  addModToBuild "$2"; addModToLaunch "$2"; shift ;;
			-f | --file-patching)     args+=("--file-patching") ;;
			-d | --diagnostic)        args+=("--diagnostic") ;;
			-e | --experimental)      args+=("--experimental") ;;
			--ignore-new-errors)      args+=("--ignore-new-errors") ;;
			--script-define)          args+=("--script-define=$2"); shift ;;
			--)
				shift
				break
				;;
			*)
				echo "Invalid option: $1"
				exit 1
				;;
			esac
		shift #go to next arg
	done

}


##############################################################
## MAIN
parseArgs "$@"
resolveMods
# debugArgs
# debugResolvedMods
[[ "$willKillGame" == true ]] && killAllProcesses
[[ ${#modsToBuildResolved[@]} -gt 0 ]] && buildMods
[[ "$willLaunchServer" == true ]] && launchServer
[[ "$willLaunchClient" == true ]] && launchClient
