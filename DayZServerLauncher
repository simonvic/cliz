#!/bin/bash

source DayZLauncherUtil

DIR="C:\Program Files (x86)\Steam\steamapps\common\DayZServer"
DIR_CLIENT="C:\Program Files (x86)\Steam\steamapps\common\DayZ"
EXE="DayZ_x64.exe"
EXE_DIAG="DayZDiag_x64.exe"

########################################################

##
# 0 = no output
# 1 = mod list | windows output
# 2 = mod list | windows output | arguments
# 3 = mod list | windows output | arguments | executables
# 4 = mod list | windows output | arguments | executables | final command 
verbosity=0
dir=$DIR
exe=$EXE
args=()
mods=()
serverMods=()

function printUsage() {
	printf "
- Usage
	DayZServerLauncher [-hvkdflanF] [-m modsList] [-s serverMods] [-p portNumber] [-c coresNumber] [-L maxFPS] [-D directory] [-X exeFile] [-C configFile] [-M mission] [-P profileFolder] [-B BEpath]
	
- Options
	-h, --help                        Show this help.
	-v, --verbose                     Be verbose. Can be repeated for more verbosity
	-k, --kill                        Kill active processes before starting a new one
	-d, --diagnostic                  Use diagnostic executable.
	-f, --file-patching               Ensures that only PBOs are loaded 
	                                   and NO unpacked data.

	-l, --do-logs                     Enables all log messages in the server RPT file.
	-a, --admin-log                   Enables the admin log.
	-n, --net-log                     Enables the network traffic logging.
	-F, --freeze-check                Stops the server when frozen for more than 
	                                   5 min and create a dump file.
	
	-m, --mods <mods>                 Loads the specified sub-folders for different mods.
	                                   Separated by semi-colons. Absolute path and 
	                                   multiple stacked folders are possible.

	-s, --server-mods <mods>          Loads the specified sub-folders for different
	                                   server-side (not broadcasted to clients) mods.
	                                   Separated by semi-colons. Absolute path and 
	                                   multiple stacked folders are possible.

	-p, --port <port>                 Port to have dedicated server listen on.
	-c, --cpu-count <cores number>    Sets the number of logical CPU cores to use for
	                                  parallel tasks processing. It should be less or
	                                   equal than the numbers of available cores.

	-L, --limit-fps <max fps>         Limits server FPS to specified value (current 
	                                   max is 200) to lower CPU usage of low population servers.

	-D, --dir <exe directory>         Selects where the executables are found
	-X, --exe <exe file>              Selects what executable file to be used
	-C, --config <config>             Selects the Server Config File.
	-M, --mission <mission>           Selects what mission to use.
	-P, --profile-folder <profile>    Path to the folder containing server profile. By default, 
	                                   server logs are written to server profile folder. 
	                                   Logs/dumps/etc will be created there, along with 
	                                   BattlEye/BEC/Rcon related files. Windows Environment 
	                                   variables are supported. E.g. &ampuserprofile&amp

	-B, --battleye-path <path>        Sets a custom path to the Battleye files

"
}

##
#	Kill all Dayz related processes (exe and diagnostic exe)
function killProcess() {

	local serverProcName=$EXE
	local diagProcName=$EXE_DIAG

	# if server process is alive, kill it
	if [ ! -z "$(wFindProcess $serverProcName)" ]; then
		[[ $verbosity -ge 1 ]] && printf "%s" "Killing $serverProcName... "
		wTaskKill "$serverProcName"
	fi

	# if diagnostic process is alive, kill it
	if [ ! -z "$(wFindProcess $diagProcName)" ]; then
		[[ $verbosity -ge 1 ]] && printf "%s" "Killing $diagProcName... "
		wTaskKill "$diagProcName"
	fi

}


##
#	Use the diagnostic executable
function useDiagExe() {
	dir="$DIR_CLIENT"
	exe="$EXE_DIAG"
	args+=("-server")
}

##
#	Specify to use file patching (diagnostic exe will be used)
function useFilePatching() {
	useDiagExe
	args+=("-filePatching")
}

function setupLaunchParameters() {
	shortOpt="hvkdflanFm:s:p:c:L:D:X:C:M:P:B:"
	longOpt="help,verbose,kill,diagnostic,file-patching,do-logs,admin-log,net-log,freeze-check,mods:,server-mods:,port:,cpu-count:,limit-fps:,dir:,exe:,config:,mission:,profile-folder:,battleye-path:"

	PARSED_ARGUMENTS=$(getopt -n DayZServerLauncher -o ${shortOpt} --long ${longOpt} -- "$@")
	if [ "$?" != "0" ]; then
		printUsage
		exit 1
	fi

	eval set -- "$PARSED_ARGUMENTS"

	while true; do
		case $1 in
		-h | --help)
			printUsage
			exit 1
			;;
		-v | --verbose)        ((verbosity++))                 ;;
		-k | --kill)           requestedKillProcess=true       ;;
		-d | --diagnostic)     useDiagExe                      ;;
		-f | --file-patching)  useFilePatching                 ;;
		-l | --do-logs)        args+=("-doLogs ")              ;;
		-a | --admin-log)      args+=("-adminLog")             ;;
		-n | --net-log)        args+=("-netLog")               ;;
		-F | --freeze-check)   args+=("-freezeCheck")          ;;
		-m | --mods)           mods+=("$2")            ; shift ;;
		-s | --server-mods)    serverMods+=("$2")      ; shift ;;
		-p | --port)           args+=("-port=$2")      ; shift ;;
		-c | --cpu-count)      args+=("-cpuCount=$2")  ; shift ;;
		-L | --limit-fps)      args+=("-limitFPS=$2")  ; shift ;;
		-D | --dir)            dir="$2"                ; shift ;;
		-X | --exe)            exe="$2"                ; shift ;;
		-C | --config)         args+=("-config=$2")    ; shift ;;
		-M | --mission)        args+=("-mission=$2")   ; shift ;;
		-P | --profile-folder) args+=("-profiles=$2")  ; shift ;;
		-B | --battleye-path)  args+=("-BEpath=$2")    ; shift ;;

		--)
			shift
			break
			;;
		*)
			echo "Invalid option: $1"
			printUsage
			exit 1
			;;
		esac
		shift #go to next arg
	done

	local modsArg=""
	for mod in "${mods[@]}"; do
		[[ -z "$modsArg" ]] && modsArg="-mod=$mod" || modsArg="$modsArg;$mod"
	done
	[[ ! -z "$modsArg" ]] && args+=("$modsArg")

	local serverModsArg=""
	for mod in "${mods[@]}"; do
		[[ -z "$serverModsArg" ]] && serverModsArg="-serverMod=$mod" || serverModsArg="$serverModsArg;$mod"
	done
	[[ ! -z "$serverModsArg" ]] && args+=("$serverModsArg")

}

##
#	Print information on parameters used when executing the command
function printLaunchParameters() {
	local formattedArgs=""
	local formattedMods=""
	printf "%s\n" "========================================================="
	printf "%s\n" "> LAUNCHING SERVER                                       "
	if [[ $verbosity -ge 3 ]]; then
		printf "%s\n" "> DIR: $dir"
		printf "%s\n" "> EXE: $exe"
	fi
	if [[ $verbosity -ge 2 ]]; then
		printf "%s\n" "> ARGUMENTS:"
		for arg in "${args[@]}"; do
			printf "\t%s\n" "$arg"
		done
	fi
	
	printf "%s\n" "> MODS:"
	for mod in "${mods[@]}"; do
		local formattedMod=$(printf "%s" "$mod" | sed 's/;/\n\t/g')
		printf "\t%s\n" "$formattedMod"
	done

	printf "%s\n" "> SERVER MODS:"
	for serverMod in "${serverMods[@]}"; do
		local formattedMod=$(printf "%s" "$serverMod" | sed 's/;/\n\t/g')
		printf "\t%s\n" "$formattedMod"
	done
}

#############################################
# MAIN

setupLaunchParameters "$@"
[[ $verbosity -ge 1 ]] && printLaunchParameters

[[ "$requestedKillProcess" = true ]] && killProcess

if [[ $verbosity -ge 4 ]]; then
	printf "%s\n\t" "> COMMAND:"
	printf "%s " cmd.exe "/c" "START" "/D" "$dir" "$exe" "${args[@]}"
	printf "\n"
fi
cmd.exe "/c" "START" "/D" "$dir" "$exe" "${args[@]}"