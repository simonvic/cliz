#!/bin/bash

source config.sh
source DayZLauncherUtil

########################################################

##
# 0 = no output
# 1 = mod list | windows output
# 2 = mod list | windows output | arguments
# 3 = mod list | windows output | arguments | executables
# 4 = mod list | windows output | arguments | executables | final command 
verbosity=0
useExperimental=false
useDiag=false
dir=$DIR
exe=$EXE
args=()
mods=()
serverMods=()

function printUsage() {
	printf "
- Usage
	DayZServerLauncher [-hvkdeflanF] [-m modsList] [-s serverMods] [-p portNumber] [-c coresNumber] [-L maxFPS] [-D directory] [-X exeFile] [-C configFile] [-M mission] [-P profileFolder] [-B BEpath]
	
- Options
	-h, --help                        Show this help.
	-v, --verbose                     Be verbose. Can be repeated for more verbosity
	-k, --kill                        Kill active processes before starting a new one
	-e, --experimental                Use experimental executable.
	-d, --diagnostic                  Use diagnostic executable.
	-f, --file-patching               Ensures that only PBOs are loaded 
	                                   and NO unpacked data.

	-l, --do-logs                     Enables all log messages in the server RPT file.
	-a, --admin-log                   Enables the admin log.
	-n, --net-log                     Enables the network traffic logging.
	-F, --freeze-check                Stops the server when frozen for more than 
	                                   5 min and create a dump file.
	
	-m, --mods <mods>                 Loads the specified sub-folders for different mods.
	                                   Separated by semi-colons. Absolute path and 
	                                   multiple stacked folders are possible.

	-s, --server-mods <mods>          Loads the specified sub-folders for different
	                                   server-side (not broadcasted to clients) mods.
	                                   Separated by semi-colons. Absolute path and 
	                                   multiple stacked folders are possible.

	-p, --port <port>                 Port to have dedicated server listen on.
	-c, --cpu-count <cores number>    Sets the number of logical CPU cores to use for
	                                  parallel tasks processing. It should be less or
	                                   equal than the numbers of available cores.

	-L, --limit-fps <max fps>         Limits server FPS to specified value (current 
	                                   max is 200) to lower CPU usage of low population servers.

	-D, --dir <exe directory>         Selects where the executables are found
	-X, --exe <exe file>              Selects what executable file to be used
	-C, --config <config>             Selects the Server Config File.
	-M, --mission <mission>           Selects what mission to use.
	-P, --profile-folder <profile>    Path to the folder containing server profile. By default, 
	                                   server logs are written to server profile folder. 
	                                   Logs/dumps/etc will be created there, along with 
	                                   BattlEye/BEC/Rcon related files. Windows Environment 
	                                   variables are supported. E.g. &ampuserprofile&amp

	-B, --battleye-path <path>        Sets a custom path to the Battleye files
	    --script-define <define>      Specify to load a script preprocessor define.
	                                   Can be repeated to define more.
	    --ignore-new-errors           Newly added game / script errors are treated as warning.

"
}

##
#	Kill all Dayz related processes (exe and diagnostic exe)
function killProcess() {
	printf "%s\n" "> KILLING PROCESSES"
	local serverProcName=$SERVER_EXE
	local diagProcName=$DIAG_EXE

	# if server process is alive, kill it
	if [ ! -z "$(wFindProcess $serverProcName)" ]; then
		[[ $verbosity -ge 1 ]] && printf "%s" "Killing $serverProcName... "
		wTaskKill "$serverProcName"
	fi

	# if diagnostic process is alive, kill it
	if [ ! -z "$(wFindProcess $diagProcName)" ]; then
		[[ $verbosity -ge 1 ]] && printf "%s" "Killing $diagProcName... "
		wTaskKill "$diagProcName"
	fi

}

##
#	Specify to use experimental executable
function useExperimental() {
	useExperimental=true
}

##
#	Use the diagnostic executable
function useDiag() {
	useDiag=true
	args+=("-server")
}

##
#	Specify to use file patching (diagnostic exe will be used)
function useFilePatching() {
	useDiag
	args+=("-filePatching")
}

function setupLaunchParameters() {
	shortOpt="hvkdeflanFm:s:p:c:L:D:X:C:M:P:B:"
	longOpt="help,verbose,kill,diagnostic,experimental,file-patching,do-logs,admin-log,net-log,freeze-check,mods:,server-mods:,port:,cpu-count:,limit-fps:,dir:,exe:,config:,mission:,profile-folder:,battleye-path:,script-define:,ignore-new-errors"

	PARSED_ARGUMENTS=$(getopt -n DayZServerLauncher -o ${shortOpt} --long ${longOpt} -- "$@")
	if [ "$?" != "0" ]; then
		printUsage
		exit 1
	fi

	eval set -- "$PARSED_ARGUMENTS"

	while true; do
		case $1 in
		-h | --help)
			printUsage
			exit 1
			;;
		-v | --verbose)        ((verbosity++))                 ;;
		-k | --kill)           requestedKillProcess=true       ;;
		-d | --diagnostic)     useDiag                         ;;
		-e | --experimental)   useExperimental                 ;;
		-f | --file-patching)  useFilePatching                 ;;
		-l | --do-logs)        args+=("-doLogs")               ;;
		-a | --admin-log)      args+=("-adminLog")             ;;
		-n | --net-log)        args+=("-netLog")               ;;
		-F | --freeze-check)   args+=("-freezeCheck")          ;;
		-m | --mods)           mods+=("$2")            ; shift ;;
		-s | --server-mods)    serverMods+=("$2")      ; shift ;;
		-p | --port)           args+=("-port=$2")      ; shift ;;
		-c | --cpu-count)      args+=("-cpuCount=$2")  ; shift ;;
		-L | --limit-fps)      args+=("-limitFPS=$2")  ; shift ;;
		-D | --dir)            dir="$2"                ; shift ;;
		-X | --exe)            exe="$2"                ; shift ;;
		-C | --config)         args+=("-config=$2")    ; shift ;;
		-M | --mission)        args+=("-mission=$2")   ; shift ;;
		-P | --profile-folder) args+=("-profiles=$2")  ; shift ;;
		-B | --battleye-path)  args+=("-BEpath=$2")    ; shift ;;
		--script-define)       args+=("-scrDef=$2")    ; shift ;;
		--ignore-new-errors)   args+=("-newErrorsAreWarning=1");;

		--)
			shift
			break
			;;
		*)
			echo "Invalid option: $1"
			printUsage
			exit 1
			;;
		esac
		shift #go to next arg
	done

	local modsArg=""
	for mod in "${mods[@]}"; do
		[[ -z "$modsArg" ]] && modsArg="-mod=$mod" || modsArg="$modsArg;$mod"
	done
	[[ ! -z "$modsArg" ]] && args+=("$modsArg")

	local serverModsArg=""
	for mod in "${serverMods[@]}"; do
		[[ -z "$serverModsArg" ]] && serverModsArg="-serverMod=$mod" || serverModsArg="$serverModsArg;$mod"
	done
	[[ ! -z "$serverModsArg" ]] && args+=("$serverModsArg")

}

##
#	Print information on parameters used when executing the command
function printLaunchParameters() {
	printf "%s\n" "> LAUNCHING SERVER"
	if [[ $verbosity -ge 3 ]]; then
		printf "\t%s\n" "- DIR: $dir"
		printf "\t%s\n" "- EXE: $exe"
	fi
	if [[ $verbosity -ge 2 ]]; then
		printf "\t%s\n" "- ARGUMENTS:"
		for arg in "${args[@]}"; do
			printf "\t\t%s\n" "$arg"
		done
	fi
	
	if [[ ${#mods[*]} -gt 0 ]]; then
		printf "\t%s\n" "- MODS:"
		for mod in "${mods[@]}"; do
			local formattedMod=$(printf "%s" "$mod" | sed 's/;/\n\t\t/g')
			printf "\t\t%s\n" "$formattedMod"
		done
	fi

	if [[ ${#serverMods[*]} -gt 0 ]]; then
		printf "\t%s\n" "- SERVER MODS:"
		for serverMod in "${serverMods[@]}"; do
			local formattedMod=$(printf "%s" "$serverMod" | sed 's/;/\n\t\t/g')
			printf "\t\t%s\n" "$formattedMod"
		done
	fi
}

##
#	Setup directory and executables based on the flag given
function setupExecutables() {
	if [[ $useExperimental == true ]]; then
		if [[ $useDiag == true ]]; then
			dir="$CLIENT_INSTALL_DIR_EXP"  # diagnostic executable is shipped only with client
			exe="$DIAG_EXE"
		else
			dir="$SERVER_INSTALL_DIR_EXP"
			exe="$SERVER_EXE"
		fi
	else
		if [[ $useDiag == true ]]; then
			dir="$CLIENT_INSTALL_DIR"  # diagnostic executable is shipped only with client
			exe="$DIAG_EXE"
		else
			dir="$SERVER_INSTALL_DIR"
			exe="$SERVER_EXE"
		fi
	fi
}
#############################################
# MAIN
setupLaunchParameters "$@"
setupExecutables
[[ "$requestedKillProcess" = true ]] && killProcess
[[ $verbosity -ge 1 ]] && printLaunchParameters

if [[ $verbosity -ge 4 ]]; then
	printf "\t%s" "> COMMAND: "
	echo cmd.exe /c "cd" "/d" "$dir" "&&" "START" "$exe" "${args[@]}"
fi
cmd.exe /c "cd" "/d" "$dir" "&&" "START" "$exe" "${args[@]}" &
