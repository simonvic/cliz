#!/bin/bash

source DayZLauncherUtil

dir=$clientDir
exe=$clientExe

##
# 0 = no output
# 1 = mod list | windows output
# 2 = mod list | windows output | arguments
# 3 = mod list | windows output | arguments | executables
# 4 = mod list | windows output | arguments | executables | final command 
verbosity=0
useExperimental=false
useDiag=false
args=()
mods=()



##
#	Kill all Dayz related processes (exe and diagnostic exe)
function killAllProcesses() {
	printf "%s\n" "> KILLING PROCESSES"
	killClient "$verbosity"
	killClientDiag "$verbosity"
}

##
#	Specify to use experimental executable
function useExperimental() {
	useExperimental=true
}

##
#	Specify to use diagnostic executable
function useDiag() {
	useDiag=true
}

##
#	Specify to use file patching (diagnostic exe will be used)
function useFilePatching() {
	useDiag
	args+=("-filePatching")
}

##
#	Print information on parameters used when executing the command
function printLaunchParameters() {
	printf "%s\n" "> LAUNCHING CLIENT"
	if [[ $verbosity -ge 3 ]]; then
		printf "\t%s\n" "- DIR: $dir"
		printf "\t%s\n" "- EXE: $exe"
	fi
	if [[ $verbosity -ge 2 ]]; then
		printf "\t%s\n" "- ARGUMENTS:"
		for arg in "${args[@]}"; do
			printf "\t\t%s\n" "$arg"
		done
	fi
	if [[ ${#mods[*]} -gt 0 ]]; then
		printf "\t%s\n" "- MODS:"
		for mod in "${mods[@]}"; do
			printf "\t\t%s\n" "$(printf "%s" "$mod" | sed 's/;/\n\t\t/g')"
		done
	fi
}

##
#	Setup directory and executables based on the flag given
function setupExecutables() {
	[[ $useExperimental == true ]] && dir=$clientDirExp
	[[ $useDiag == true ]] && exe=$clientExeDiag
}

options=(
	"h,help                         --Print this page and exit"
	"v,verbose                      --Be verbose. Can be repeated for more verbosity"
	"k,kill                         --Kill active processes before starting a new one"
	"e,experimental                 --Use experimental executable"
	"d,diagnostic                   --Use diagnostic executable"
	"w,windowed                     --Runs the game in windowed mode"
	"n,name:name                    --Selects a profile from profiles folder with the given name (also in-game name)"
	"f,file-patching                --Ensures that only PBOs are loaded and NO unpacked data."
	"B,buldozer                     --Starts the game in bulldozer mode."
	"E,no-pause                     --Allows the game to run even when its window does not have focus."
	"l,do-logs                      --Enables all log messages in the server RPT file."
	"s,script-debug                 --Enable script debug"
	"m,mods:mods                    --Loads the specified sub-folders for different mods.
	                                    Separated by semi-colons.
	                                    Absolute path and multiple stacked folders are possible."
	"a,server-address:address:port  --Connects to this server with this IP address or domain name and port"
	"p,server-password:password     --Uses this server passoword, if required"
	"c,cpu-count:cores-number       --Sets the number of logical CPU cores to use for parallel tasks processing.
	                                    It should be less or equal than the numbers of available cores."
	"D,dir:exe-directory            --Selects where the executables are found"
	"X,exe:exe-file                 --Selects what executable file to be used"
	"M,mission:mission              --Selects what mission to use."
	"P,profile-folder:profile       --Path to the folder containing server profile.
	                                    By default, server logs are written to server profile folder. 
	                                    Logs/dumps/etc will be created there, along with BattlEye/BEC/Rcon related files.
	                                    Windows Environment variables are supported. E.g. &ampuserprofile&amp"
	"W,world:world                  --Selects a game world to be loaded by default"
	"script-define:define           --Specify to load a script preprocessor define.
	                                    Can be repeated to define more."
	"ignore-new-errors              --Newly added game / script errors are treated as warning."
)
_options=$(declare -p options)

function printUsage() {
	mangen \
		--name "${0##*/}" \
		--options "$_options" \
		--command-width 40 \
		--description-width 80 \
		--new-line-indent 4
}

function parseArgs() {
	local parsedArgs
	parsedArgs=$(getopt -n "${0##*/}" -o "$(mangen -so "$_options")" --long "$(mangen -lo "$_options")" -- "$@")
	[[ "$?" != "0" ]] && exit 1
	eval set -- "$parsedArgs"

	while true; do
		case $1 in
		-h | --help)             printUsage; exit 1 ;;
		-v | --verbose)          ((verbosity++))                 ;;
		-k | --kill)             requestedKillProcess=true       ;;
		-d | --diagnostic)       useDiag                         ;;
		-e | --experimental)     useExperimental                 ;;
		-f | --file-patching)    useFilePatching                 ;;
		-s | --script-debug)     args+=("-scriptDebug=true")     ;;
		-w | --windowed)         args+=("-window")               ;;
		-l | --do-logs)          args+=("-doLogs")               ;;
		-B | --buldozer)         args+=("-buldozer")             ;;
		-E | --no-pause)         args+=("-noPause")              ;;
		-n | --name)             args+=("-name=$2")      ; shift ;;
		-m | --mods)             mods+=("$2")            ; shift ;;
		-a | --server-address)   args+=("-connect=$2")   ; shift ;;
		-p | --server-passoword) args+=("-password=$2")  ; shift ;;
		-c | --cpu-count)        args+=("-cpuCount=$2")  ; shift ;;
		-D | --dir)              dir="$2"                ; shift ;;
		-X | --exe)              exe="$2"                ; shift ;;
		-M | --mission)          args+=("-mission=$2")   ; shift ;;
		-P | --profile-folder)   args+=("-profiles=$2")  ; shift ;;
		-W | --world)            args+=("-world=$2")     ; shift ;;
		--script-define)         args+=("-scrDef=$2")    ; shift ;;
		--ignore-new-errors)     args+=("-newErrorsAreWarnings=1");;
		
		--)
			shift
			break
			;;
		*)
			echo "Invalid option: $1"
			printUsage
			exit 1
			;;
		esac
		shift #go to next arg
	done

	local modsArg=""
	for mod in "${mods[@]}"; do
		[[ -z "$modsArg" ]] && modsArg="-mod=$mod" || modsArg="$modsArg;$mod"
	done
	[[ -n "$modsArg" ]] && args+=("$modsArg")
}

###############################################################################
parseArgs "$@"
setupExecutables
[[ $requestedKillProcess == true ]] && killAllProcesses
[[ $verbosity -ge 1 ]] && printLaunchParameters

if [[ $verbosity -ge 4 ]]; then
	printf "\t%s" "> COMMAND: "
	echo cmd.exe /c "cd" "/d" "$dir" "&&" "START" "$exe" "${args[@]}"
fi
cmd.exe /c "cd" "/d" "$dir" "&&" "START" "$exe" "${args[@]}" &
