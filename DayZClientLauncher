#!/bin/bash

source config.sh
source DayZLauncherUtil


########################################################

##
# 0 = no output
# 1 = mod list | windows output
# 2 = mod list | windows output | arguments
# 3 = mod list | windows output | arguments | executables
# 4 = mod list | windows output | arguments | executables | final command 
verbosity=0
useExperimental=false
useDiag=false
dir=$CLIENT_INSTALL_DIR
exe=$CLIENT_EXE
args=()
mods=()

##
#	Print script usage
function printUsage() {
	printf "%s" "
- Usage
	DayZClientLauncher [-hvkdewflsBE] [-n name] [-m modsList] [-a serverAddress:port] [-p password] [-c coresNumber] [-D directory] [-X exeFile] [-M mission] [-P profileFolder] [-W world]
	
- Options
	-h, --help                             Show this help.
	-v, --verbose                          Be verbose. Can be repeated for more verbosity
	-k, --kill                             Kill active processes before starting a new one
	-e, --experimental                     Use experimental executable.
	-d, --diagnostic                       Use diagnostic executable.
	-w, --windowed                         Runs the game in windowed mode
	-n, --name <name>                      Selects a profile from profiles folder with the 
	                                        given name (also in-game nickname)

	-f, --file-patching                    Ensures that only PBOs are loaded
	                                        and NO unpacked data.
	-B, --buldozer                         Starts the game in bulldozer mode.
	-E, --no-pause                         Allows the game to run even when its window does not have focus.
	-l, --do-logs                          Enables all log messages in the server RPT file.
	-s, --script-debug                     Enable script debug
	-m, --mods <mods>                      Loads the specified sub-folders for different mods.
	                                        Separated by semi-colons. Absolute path and 
	                                        multiple stacked folders are possible.

	-a, --server-address <address:port>    Connects to this server with this IP address or
	                                        or domain name and port

	-p, --server-password <password>      Uses this server passoword, if required
	-c, --cpu-count <cores number>         Sets the number of logical CPU cores to use for
	                                        parallel tasks processing. It should be less or
	                                        equal than the numbers of available cores.

	-D, --dir <exe directory>              Selects where the executables are found
	-X, --exe <exe file>                   Selects what executable file to be used
	-M, --mission <mission>                Selects what mission to use.
	-P, --profile-folder <profile>         Path to the folder containing server profile. By default, 
	                                        server logs are written to server profile folder. 
	                                        Logs/dumps/etc will be created there, along with 
	                                        BattlEye/BEC/Rcon related files. Windows Environment 
	                                        variables are supported. E.g. &ampuserprofile&amp

	-W, --world <world>                    Selects a game world to be loaded by default
	    --script-define <define>           Specify to load a script preprocessor define.
	                                        Can be repeated to define more.
	    --ignore-new-errors                Newly added game / script errors are treated as warning.

"
}

##
#	Kill all Dayz related processes (exe and diagnostic exe)
function killProcess() {
	printf "%s\n" "> KILLING PROCESSES"
	local clientProcName=$CLIENT_EXE
	local diagProcName=$DIAG_EXE

	# if client process is alive, kill it
	if [ ! -z "$(wFindProcess $clientProcName)" ]; then
		[[ $verbosity -ge 1 ]] && printf "%s" "Killing $clientProcName... "
		wTaskKill "$clientProcName"
	fi

	# if diagnostic process is alive, kill it
	if [ ! -z "$(wFindProcess $diagProcName)" ]; then
		[[ $verbosity -ge 1 ]] && printf "%s" "Killing $diagProcName... "
		wTaskKill "$diagProcName"
	fi

}

##
#	Specify to use experimental executable
function useExperimental() {
	useExperimental=true
}

##
#	Specify to use diagnostic executable
function useDiag() {
	useDiag=true
}

##
#	Specify to use file patching (diagnostic exe will be used)
function useFilePatching() {
	useDiag
	args+=("-filePatching")
}

##
#	
function setupLaunchParameters() {
	shortOpt="hvkdeswflBEn:m:a:p:c:D:X:M:P:W:"
	longOpt="help,verbose,kill,diagnostic,experimental,script-debug,windowed,file-patching,do-logs,buldozer,no-pause,name:,mods:,server-address:,server-password:,cpu-count:,dir:,exe:,mission:,profile-folder:,world:,script-define:,ignore-new-errors"

	PARSED_ARGUMENTS=$(getopt -n DayZClientLauncher -o ${shortOpt} --long ${longOpt} -- "$@")
	if [ "$?" != "0" ]; then
		printUsage
		exit 1
	fi

	eval set -- "$PARSED_ARGUMENTS"

	while true; do
		case $1 in
		-h | --help)
			printUsage
			exit 1
			;;
		
		-v | --verbose)          ((verbosity++))                 ;;
		-k | --kill)             requestedKillProcess=true       ;;
		-d | --diagnostic)       useDiag                         ;;
		-e | --experimental)     useExperimental                 ;;
		-f | --file-patching)    useFilePatching                 ;;
		-s | --script-debug)     args+=("-scriptDebug=true")     ;;
		-w | --windowed)         args+=("-window")               ;;
		-l | --do-logs)          args+=("-doLogs")               ;;
		-B | --buldozer)         args+=("-buldozer")             ;;
		-E | --no-pause)         args+=("-noPause")              ;;
		-n | --name)             args+=("-name=$2")      ; shift ;;
		-m | --mods)             mods+=("$2")            ; shift ;;
		-a | --server-address)   args+=("-connect=$2")   ; shift ;;
		-p | --server-passoword) args+=("-password=$2")  ; shift ;;
		-c | --cpu-count)        args+=("-cpuCount=$2")  ; shift ;;
		-D | --dir)              dir="$2"                ; shift ;;
		-X | --exe)              exe="$2"                ; shift ;;
		-M | --mission)          args+=("-mission=$2")   ; shift ;;
		-P | --profile-folder)   args+=("-profiles=$2")  ; shift ;;
		-W | --world)            args+=("-world=$2")     ; shift ;;
		--script-define)         args+=("-scrDef=$2")    ; shift ;;
		--ignore-new-errors)     args+=("-newErrorsAreWarning=1");;
		
		--)
			shift
			break
			;;
		*)
			echo "Invalid option: $1"
			printUsage
			exit 1
			;;
		esac
		shift #go to next arg
	done

	local modsArg=""
	for mod in "${mods[@]}"; do
		[[ -z "$modsArg" ]] && modsArg="-mod=$mod" || modsArg="$modsArg;$mod"
	done
	[[ ! -z "$modsArg" ]] && args+=("$modsArg")
}

##
#	Print information on parameters used when executing the command
function printLaunchParameters() {
	printf "%s\n" "> LAUNCHING CLIENT"
	if [[ $verbosity -ge 3 ]]; then
		printf "\t%s\n" "- DIR: $dir"
		printf "\t%s\n" "- EXE: $exe"
	fi
	if [[ $verbosity -ge 2 ]]; then
		printf "\t%s\n" "- ARGUMENTS:"
		for arg in "${args[@]}"; do
			printf "\t\t%s\n" "$arg"
		done
	fi
	if [[ ${#mods[*]} -gt 0 ]]; then
		printf "\t%s\n" "- MODS:"
		for mod in "${mods[@]}"; do
			local formattedMod=$(printf "%s" "$mod" | sed 's/;/\n\t\t/g')
			printf "\t\t%s\n" "$formattedMod"
		done
	fi
}

##
#	Setup directory and executables based on the flag given
function setupExecutables() {
	[[ $useExperimental == true ]] && dir=$CLIENT_INSTALL_DIR_EXP || dir=$CLIENT_INSTALL_DIR
	[[ $useDiag == true ]] && exe=$DIAG_EXE || exe=$CLIENT_EXE
}

#############################################
# MAIN
setupLaunchParameters "$@"
setupExecutables
[[ "$requestedKillProcess" = true ]] && killProcess
[[ $verbosity -ge 1 ]] && printLaunchParameters

if [[ $verbosity -ge 4 ]]; then
	printf "\t%s" "> COMMAND: "
	echo cmd.exe /c "cd" "/d" "$dir" "&&" "START" "$exe" "${args[@]}"
fi
# aah... the magic of windows cmd 
cmd.exe /c "cd" "/d" "$dir" "&&" "START" "$exe" "${args[@]}" &

